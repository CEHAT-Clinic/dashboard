rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    // Returns true if the current user is authenticated and is an admin user
    function isAdmin() {
      let isAdmin = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin;
      return isSignedIn() && isAdmin;
    }

    match /sensors/{sensorDoc} {
      allow read, write: if isAdmin();
      
      match /readings/{reading} {
        allow read, write: if false;
      }
    }

    match /admin/users {
      // All signed in users allowed to read the admin users doc because
      // this is used to check if the user is an admin
      allow read: if isSignedIn();
      // Only admin users are allowed to change modify the admin array
      allow write: if isAdmin();
    }

    // Only allow a user to be changed to an admin if the current user is an admin
    // Only allow changes to other fields if user is modifying their own user
    // doc, or if the user is an admin user, who can modify all accounts
    match /users/{userId} {
      // For a valid user doc update for a non-admin user, they must be signed in,
      // be changing their own doc, and not change the admin field to true
      function validNonAdminUpdate() {
        let isCorrectUserDoc = isSignedIn() && request.auth.uid == userId;
        let validAdminStatus = request.resource.data.admin == false;
        return isCorrectUserDoc && validAdminStatus;
      }

      allow read, write: if isAdmin() || validNonAdminUpdate();
    }

    // Used to display values on live webpage
    match /current-reading/{readings} {
      allow read: if true;
      allow write: if false;
    }
  }
}
